import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.plugins.signing.Sign

plugins {
    id 'application'
    id 'idea'
    id 'signing'
    id 'maven-publish'
    id 'org.openjfx.javafxplugin' version '0.0.7'
    id "com.github.ethankhall.semantic-versioning" version "1.1.0"
    id "com.github.ben-manes.versions" version "0.13.0"
    id "com.jfrog.bintray" version "1.8.4"
    id "org.asciidoctor.convert" version "2.0-alpha.5"
    id "org.ajoberstar.git-publish" version "2.0.0"
    id "com.github.hierynomus.license" version "0.15.0"
    id "net.saliman.properties" version "1.4.5"
    id 'com.github.jk1.dependency-license-report' version '0.3.5'
}


project.version.with {
    major = jfxgaugeVersionMajor as int
    minor= jfxgaugeVersionMinor as int
    patch = jfxgaugeVersionPatch as int
    if (project.hasProperty('jfxgaugeVersionLabel')) {
        preRelease = jfxgaugeVersionLabel
    }
    releaseBuild = Boolean.valueOf(jfxgaugeReleaseBuild)
}
ext.jfxgaugeVersion = project.version as String

repositories {
  jcenter()
}

def pomConfig = {
    url "https://github.com/beryx/jfxgauge"
    developers {
        developer {
            id "siordache"
            name "Serban Iordache"
        }
    }
    scm {
        connection "https://github.com/beryx/jfxgauge.git"
        developerConnection "https://github.com/beryx/jfxgauge.git"
        url "https://github.com/beryx/jfxgauge.git"
    }
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:all,-syntax,-missing', '-quiet')
}

repositories {
    jcenter()
    mavenCentral()
}

sourceCompatibility = 11
group = 'org.beryx.jfxgauge'
version = jfxgaugeVersion

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

configurations {
  provided
  compile {transitive = true}
}

license {
    header rootProject.file("license-header.txt")
    skipExistingHeaders = true
    ignoreFailures = false
    exclude "**/guigarage/**"
}

signing {
    sign configurations.archives
}

def isPublishTask(task) {
  task.name.startsWith('publish') && (task.name != 'gitPublishPush')
}

signArchives {
  onlyIf { gradle.taskGraph.allTasks.findAll {task -> isPublishTask(task)} }
}

dependencies {
  compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'

  testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'
  testCompile 'junit:junit:4.12'
}

javafx {
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

mainClassName = 'org.beryx.jfxgauge.demo.GaugeDemo'

applicationName = "jfxgauge"

startScripts {
    defaultJvmOpts = ['-Dlogback.configurationFile=logback.xml']
}

applicationDistribution.from("dist") {
    filter(ReplaceTokens, tokens:[jfxgaugeVersion : jfxgaugeVersion])
}

applicationDistribution.from(".") {
    include('LICENSE', 'NOTICE')
}

sourceSets.main.compileClasspath += configurations.provided

jar {
    manifest {
        attributes 'Main-Class': 'org.beryx.jfxgauge.demo.GaugeDemo',
                   'Implementation-Title': "${project.archivesBaseName}",
                   'Implementation-Version': jfxgaugeVersion,
                   'Implementation-Vendor-Id': 'beryx.org'
    }

    from ("src/main/java") {
        include('**/*.fxml')
        include('**/*.css')
        include('**/*.png')
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}


configureJavadoc(javadoc)

def configureJavadoc(task) {
  configure(task) {
    if(project.configurations.hasProperty('provided')) {
        classpath += project.configurations.provided
    }
    configure(options) {
      links "http://docs.oracle.com/javase/8/docs/api/"
    }
  }
}

task javadocJar(type: Jar, dependsOn: classes) {
  classifier "javadoc"
  from javadoc
}

artifacts {
    archives sourcesJar, javadocJar
}

asciidoctor {
  sourceDir = file("doc")
  sources {include 'index.adoc'}
  logDocuments = true
  attributes 'source-highlighter': 'coderay',
             'coderay-linenums-mode': 'table',
             icons: 'font',
             imagesdir: 'img',
             'data-uri': '',
             linkattrs: true,
             linkcss: true
}
task deleteGHPagesRepo(type: Delete) {
   delete "${project.buildDir}/ghpages"
}

gitPublishPush.dependsOn deleteGHPagesRepo

gitPublish {
    repoUri = 'https://github.com/beryx/jfxgauge.git'
    branch = 'gh-pages'

  contents {
    def pgType = project.hasProperty('ghPageType') ? ghPageType : 'latest'
    if(pgType == 'init') {
      from file("ghpages")
    } else {
      from file("${asciidoctor.outputDir.path}/html5")
      from file("build/docs")
    }
    def docDir = Boolean.valueOf(jfxgaugeReleaseBuild) ? 'releases' : 'snapshots'
    if(pgType == 'init') {
      into "."
    } else if(pgType == 'version') {
        gitPublishPush.enabled = (docDir != 'snapshots')
      into "$docDir/$jfxgaugeVersion"
    } else {
      into "$docDir/latest"
    }
  }
}

publishing {
    publications {
        jfxgauge(MavenPublication) {
            from components.java
            artifact sourcesJar { classifier "sources" }
            artifact javadocJar { classifier "javadoc" }
            groupId 'org.beryx.jfxgauge'
            artifactId "jfxgauge"
            version jfxgaugeVersion
            pom.withXml {
                def root = asNode()
                root.appendNode('name', "jfxgauge")
                root.appendNode('description', "The JFXGauge artifact")
                root.children().last() + pomConfig

                // We cannot configure the licenses in pomConfig due to a name conflict with the 'license' extension defined by the com.github.hierynomus.license plugin
                def licenseNode = root.appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', 'The Apache Software License, Version 2.0')
                licenseNode.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                licenseNode.appendNode('distribution', 'repo')
            }
        }
    }
}

task "create-dirs" {
    doFirst {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    }
}


def gitIgnore = file(".gitignore").readLines()
def gitIgnoreDirs = gitIgnore*.trim().findAll { !it.startsWith("#") && it.endsWith("/") }

def readFromConsole(prompt) {
    readFromConsole('', prompt)
}
def readFromConsole(header, prompt) {
    readFromConsole(header, prompt, false)
}
def readPasswordFromConsole(prompt) {
    readPasswordFromConsole(prompt, true)
}
def readPasswordFromConsole(header, prompt) {
    readFromConsole(header, prompt, true)
}
def readFromConsole(header, prompt, isPassword) {
    def console = System.console()
    if (console) {
        if(header) {
            console.printf "\n\n# $header\n"
        }
        String value = null;
        while(!value?.trim()) {
            def val = console."read${isPassword ? 'Password' : 'Line'}"("> $prompt: ")
            if(val) {
                value = new String(val)
            }
        }
        return value
    } else {
        throw new GradleException("Cannot get console.")
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (gradle.taskGraph.allTasks.findAll {task -> isPublishTask(task)}) {
        def password = readPasswordFromConsole('Please enter your signing credentials', 'PGP Private Key Password')
        ext."signing.keyId" = signingKeyId
        ext."signing.secretKeyRingFile" = signingSecretKeyRingFile
        ext."signing.password" = password
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.getProperty('bintrayUser') : "unknownUser"
    key =  project.hasProperty('bintrayKey') ? project.getProperty('bintrayKey') : "unknownKey"
    publications = ["jfxgauge"]
    pkg {
        repo = 'maven'
        name = 'jfxgauge'
        userOrg = 'beryx'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/beryx/jfxgauge.git'
        
        version {
                name = jfxgaugeVersion
                desc = "JFXGauge $jfxgaugeVersion"
                released  = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZZ") 
                vcsTag = jfxgaugeVersion
                gpg {
                    sign = true
                }
        }        
    }
}