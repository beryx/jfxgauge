import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.plugins.signing.Sign

plugins {
    id 'idea'
    id 'maven-publish'
    id "com.github.ethankhall.semantic-versioning" version "1.1.0"
    id "com.github.ben-manes.versions" version "0.11.3"
    id "com.jfrog.bintray" version "1.6"
    id "com.github.hierynomus.license" version "0.12.1"
    id "net.saliman.properties" version "1.4.4"
    id 'com.gradle.build-receipt' version '1.0'
    id 'com.github.jk1.dependency-license-report' version '0.3.4'
    id "com.dorongold.task-tree" version "1.2.1"    
}

buildReceiptLicense {
    agreementUrl = 'https://gradle.com/terms-of-service'
    agree = 'yes'
}

project.version.with {
    major = jfxgaugeVersionMajor as int
    minor= jfxgaugeVersionMinor as int
    patch = jfxgaugeVersionPatch as int
    if (project.hasProperty('jfxgaugeVersionLabel')) {
        preRelease = jfxgaugeVersionLabel
    }
    releaseBuild = Boolean.valueOf(jfxgaugeReleaseBuild)
}
ext.jfxgaugeVersion = project.version as String

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

repositories {
  jcenter()
  mavenCentral()
}

def pomConfig = {
    url "https://github.com/beryx/jfxgauge"
    developers {
        developer {
            id "siordache"
            name "Serban Iordache"
            // email "name@example.com"
        }
    }
    scm {
        connection "https://github.com/beryx/jfxgauge.git"
        developerConnection "https://github.com/beryx/jfxgauge.git"
        url "https://github.com/beryx/jfxgauge.git"
    }
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:all,-syntax,-missing', '-quiet')
}

apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'findbugs'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'signing'
apply plugin: 'com.github.hierynomus.license'
apply plugin: 'com.github.jk1.dependency-license-report'


repositories {
    jcenter()
    mavenCentral()
}

sourceCompatibility = 1.8
group = 'org.beryx.jfxgauge'
version = jfxgaugeVersion

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

configurations {
  provided
  compile {transitive = true}
}

license {
    header rootProject.file("license-header.txt")
    skipExistingHeaders true
    ignoreFailures false
}

signing {
    sign configurations.archives
}

signArchives {
  onlyIf { gradle.taskGraph.allTasks.findAll {task -> task.name.startsWith('publish')} }
}

dependencies {
  compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.20'
  compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'
  compile 'com.guigarage:css-helper:0.7'
  provided 'com.google.code.findbugs:findbugs-annotations:3.0.1'

  testCompile 'junit:junit:4.12'
}


mainClassName = 'org.beryx.jfxgauge.demo.GaugeDemo'

applicationName = "jfxgauge"

startScripts {
    defaultJvmOpts = ['-Dlogback.configurationFile=logback.xml']
}

applicationDistribution.from("dist") {
    filter(ReplaceTokens, tokens:[jfxgaugeVersion : jfxgaugeVersion])
}

applicationDistribution.from(".") {
    include('LICENSE', 'NOTICE')
}

sourceSets.main.compileClasspath += configurations.provided

findbugs {
    effort = "max"
    excludeFilter = file("findbugsExclude.xml")
}
jar {
    manifest {
        attributes 'Main-Class': 'org.beryx.jfxgauge.demo.GaugeDemo',
                   'Implementation-Title': "${project.archivesBaseName}",
                   'Implementation-Version': jfxgaugeVersion,
                   'Implementation-Vendor-Id': 'beryx.org'
    }

    from ("src/main/java") {
        include('**/*.fxml')
        include('**/*.css')
        include('**/*.png')
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}


configureJavadoc(javadoc)

def configureJavadoc(task) {
  configure(task) {
    if(project.configurations.hasProperty('provided')) {
        classpath += project.configurations.provided
    }
    configure(options) {
      links "http://docs.oracle.com/javase/8/docs/api/"
    }
  }
}

task javadocJar(type: Jar, dependsOn: classes) {
  classifier "javadoc"
  from javadoc
}

artifacts {
    archives sourcesJar, javadocJar
}

publishing {
    publications {
        jfxgauge(MavenPublication) {
            from components.java
            artifact sourcesJar { classifier "sources" }
            artifact javadocJar { classifier "javadoc" }
            groupId 'org.beryx.jfxgauge'
            artifactId "jfxgauge"
            version jfxgaugeVersion
            pom.withXml {
                def root = asNode()
                root.appendNode('name', "jfxgauge")
                root.appendNode('description', "The JFXGauge artifact")
                root.children().last() + pomConfig

                // We cannot configure the licenses in pomConfig due to a name conflict with the 'license' extension defined by the com.github.hierynomus.license plugin
                def licenseNode = root.appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', 'The Apache Software License, Version 2.0')
                licenseNode.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                licenseNode.appendNode('distribution', 'repo')
            }
        }
    }
}

task "create-dirs" << {
   sourceSets*.java.srcDirs*.each { it.mkdirs() }
   sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}


///////////  ECLIPSE  //////////////////
def resourcesDir = 'src/main/resources/'
eclipse.classpath.file {
    beforeMerged { classpath ->
        classpath.entries.removeAll()
    }
    whenMerged { classpath ->
        classpath.entries.findAll { entry -> entry.kind == 'lib' }*.exported = true
        classpath.entries.removeAll { entry -> entry.kind == 'src' && entry.path.contains('/resources') }
        classpath.entries.add(new org.gradle.plugins.ide.eclipse.model.SourceFolder(resourcesDir, null))        
        classpath.entries.findAll { entry -> entry.kind == 'con' && entry.path.contains('StandardVMType') }.each { entry ->
            entry.accessRules.add(new org.gradle.plugins.ide.eclipse.model.AccessRule('accessible', 'javafx/**'))
        }
    }
}

eclipse {
    project {
        file.beforeMerged { project ->
            project.natures.clear()
        }
    }
    classpath {
        plusConfigurations << configurations.provided
    }
}

/////////////  IDEA  ///////////////////
idea {
  module {
    scopes.PROVIDED.plus += [configurations.provided]
  }
}

def gitIgnore = file(".gitignore").readLines()
def gitIgnoreDirs = gitIgnore*.trim().findAll { !it.startsWith("#") && it.endsWith("/") }

idea {
  module {
    outputFile = file("jfxgauge.iml")
  }
  project {
    languageLevel = "1.8"
    outputFile = file('jfxgauge.ipr')
    ipr {
      withXml { provider ->
        def vcsDirMap = provider.node.component.find { it.@name == 'VcsDirectoryMappings' }
        if(vcsDirMap) {
          vcsDirMap.mapping.@directory = '$PROJECT_DIR$'
          vcsDirMap.mapping.@vcs = 'Git'
        }
      }
    }
    configure(modules) { module ->
      excludeDirs = module.project.files(gitIgnoreDirs) as Set
    }    
  }
}

ideaWorkspace {
  outputFile = file('jfxgauge.iws')
}

def readFromConsole(prompt) {
    readFromConsole('', prompt)
}
def readFromConsole(header, prompt) {
    readFromConsole(header, prompt, false)
}
def readPasswordFromConsole(prompt) {
    readPasswordFromConsole(prompt, true)
}
def readPasswordFromConsole(header, prompt) {
    readFromConsole(header, prompt, true)
}
def readFromConsole(header, prompt, isPassword) {
    def console = System.console()
    if (console) {
        if(header) {
            console.printf "\n\n# $header\n"
        }
        String value = null;
        while(!value?.trim()) {
            def val = console."read${isPassword ? 'Password' : 'Line'}"("> $prompt: ")
            if(val) {
                value = new String(val)
            }
        }
        return value
    } else {
        throw new GradleException("Cannot get console.")
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (gradle.taskGraph.allTasks.findAll {task -> task.name.startsWith('publish')}) {
        def password = readPasswordFromConsole('Please enter your signing credentials', 'PGP Private Key Password')
        ext."signing.keyId" = signingKeyId
        ext."signing.secretKeyRingFile" = signingSecretKeyRingFile
        ext."signing.password" = password
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.getProperty('bintrayUser') : "unknownUser"
    key =  project.hasProperty('bintrayKey') ? project.getProperty('bintrayKey') : "unknownKey"
    publications = ["jfxgauge"]
    pkg {
        repo = 'maven'
        name = 'jfxgauge'
        userOrg = 'beryx'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/beryx/jfxgauge.git'
        
        version {
                name = jfxgaugeVersion
                desc = "JFXGauge $jfxgaugeVersion"
                released  = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZZ") 
                vcsTag = jfxgaugeVersion
                gpg {
                    sign = true
                }
        }        
    }
}